{"version":3,"sources":["game/js/spritesheet.js","game/js/loaders.js","game/js/main.js"],"names":["SpriteSheet","constructor","image","width","height","tiles","Map","define","name","x","y","buffer","document","createElement","getContext","drawImage","set","defineTile","draw","context","get","drawTile","loadImage","loadLevel","url","Promise","resolve","Image","addEventListener","src","fetch","then","r","json","console","log","canvas","getElementById","resolution","rScale","scalefactor","loadBackgroundSprites","sprites","drawBackground","background","ranges","forEach","x1","x2","y1","y2","all","level","backgrounds","lastTime","update","time","deltaTime","requestAnimationFrame"],"mappings":"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","file":"9549da0a8d43ed0e8277de32fc887010.map","sourcesContent":["export default class SpriteSheet {\n    constructor(image, width, height) {\n        this.image = image;\n        this.width = width;\n        this.height = height;\n        this.tiles = new Map();\n    }\n\n    define(name, x, y, width, height) {\n        const buffer = document.createElement('canvas');\n        buffer.width = this.width;\n        buffer.height = this.height;\n        buffer\n            .getContext('2d')\n            .drawImage(\n                this.image,\n                x,\n                y,\n                width,\n                height,\n                0,\n                0,\n                width,\n                height\n            );\n        this.tiles.set(name, buffer)\n    }\n\n    defineTile(name, x, y) {\n        this.define(\n            name,\n            x * this.width,\n            y * this.height,\n            this.width,\n            this.height);\n    }\n\n    draw(name, context, x, y) {\n        const buffer = this.tiles.get(name);\n        context.drawImage(buffer, x, y);\n    }\n\n    drawTile(name, context, x, y) {\n        this.draw(name, context, x * this.width, y * this.height);\n    }\n}","import base from '../levels/base'\n\nexport function loadImage(url){\n    return new Promise(resolve => {\n        const image = new Image();\n        image.addEventListener('load', () => {\n            resolve(image);\n        })\n        image.src = url;\n    });\n}\n\nexport function loadLevel(name) {\n    return fetch(`/levels/${name}`)\n    .then(r => {\n        r.json();\n    })\n    .then(r => { console.log(r);});\n    console.log(\"Level loaded\");\n}\n\n\n\n","import {SpriteSheet} from './spritesheet';\nimport {loadImage, loadLevel} from './loaders';\n\n\nconst canvas = document.getElementById('ctx');\nconst context = canvas.getContext('2d');\nconst resolution = 10;  // 10px per graphic unit\ncanvas.width = 110 * resolution;\ncanvas.height = 70 * resolution;\n\n// used to scale values to appropriate resolution\nfunction rScale(scalefactor){\n    return scalefactor * resolution;\n}\n\nfunction loadBackgroundSprites() {\n    return loadImage('game/img/tmpBkg.png')\n    .then(image => {\n        console.log('Image loaded', image);\n        const sprites = new SpriteSheet(image, 16, 16);\n        sprites.defineTile('ground', 0, 0);\n        sprites.defineTile('sky', 3, 23);\n        return sprites;\n    });\n}\n\nfunction drawBackground(background, context, sprites) {\n    background.ranges.forEach(([x1, x2, y1, y2]) => {\n        for (let x = x1; x < x2; ++x) {\n            for (let y = y1; y < y2; ++y){\n                sprites.drawTile(background.tiles, context, x, y);\n            }\n        }\n    })\n}\n\n// const levels = new Levels();\n// function init() {\n    \n//     levels.addLevel(fetch(`/levels/${name}`)\n//         .then(r => {\n//             r.json();\n//         })\n//     );\n// }\n\nfunction draw() {\n    // reset game screen\n    // context.fillStyle = '#4682b4';\n    // context.fillRect(0, 0, canvas.width, canvas.height);\n    Promise.all([\n        loadBackgroundSprites(),\n        loadLevel('base'),\n    ])\n    .then(([sprites, level]) => {\n        level.backgrounds.forEach(background => {\n            drawBackground(background, context, sprites);\n        });\n    });\n\n\n}\n\nlet lastTime = 0;\nfunction update(time = 0) {\n    const deltaTime = time - lastTime;\n    lastTime = time;\n\n    draw();\n    requestAnimationFrame(update);\n}\n\n// update();\ndraw();"]}